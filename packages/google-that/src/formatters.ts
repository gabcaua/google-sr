import boxen from "boxen";
import { html, stripIndents, stripIndent } from "common-tags";
import { ResultTypes, type ResultNode } from "google-sr";

export function getJSONFormat(results: ResultNode[][]) {
  return JSON.stringify(results, null, 4);
}

export function getTXTFormat(results: ResultNode[][]) {
  let startTxt = stripIndents(html)`
    ${results.map(
      (page, i) => html`
        ==============${i + 1}/${results.length}==================
        ${page.map((data) => {
          switch (data.type) {
            case ResultTypes.SearchResult:
              return boxen(
                stripIndents`
            üîç ${data.title}
            üîó ${data.link}
            üìù ${data.description}
            `,
                { padding: 1 }
              );
            case ResultTypes.TranslateResult:
              return boxen(
                stripIndents`
                  üåê ${data.source.language}  => üåç ${data.translation.language}
                  üìú ${data.source.text}     => ‚ú® ${data.translation.text} ${
                  data.translation.pronunciation
                    ? `(üîä ${data.translation.pronunciation})`
                    : ""
                }
                  `,
                { padding: 1 }
              );
            case ResultTypes.DictionaryResult:
              return boxen(
                stripIndents(html)`
                  üìö ${data.word}
                  üîâ ${data.phonetic}

                  ${data.audio ? `üîä ${data.audio}` : ""}

                  ${data.definitions.map(
                    (definition) => stripIndent`
                  üìñ ${definition[0]}
                      ‚Ü≥ ${definition[1]}
                  `
                  )}
                  `,
                { padding: 1 }
              );
            case ResultTypes.TimeResult:
              return boxen(
                stripIndents(html)`
                  üìç ${data.location}
                  ‚è∞ ${data.time}
                  üó£Ô∏è ${data.timeInWords}
                   `,
                { padding: 1 }
              );
            case ResultTypes.CurrencyResult:
              return boxen(
                stripIndents(html)`
                  üí∞ ${data.from}  => üí∏ ${data.to}
                     `,
                { padding: 1 }
              );
            default:
              return `Unsupported`;
          }
        })}
      `
    )}
  `;

  return startTxt;
}

export function getHTMLFormat(results: ResultNode[][], query: string, total: number) {
  const pages = new Array(results.length).fill(null).map((_m, i) => i + 1);
  return html`
    <html>
      <head>
        <!-- Autogenerated by google-that (npm) on ${new Date().toDateString()} -->
        <title>Autogenerated query | ${query}</title>
        <style>
          body {
            height: 100vh;
            margin: 3;
            background-color: #f0f0f0;
            font-family: Arial, sans-serif;
          }

          input {
            width: 100%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            font-size: 16px;
            margin-bottom: 20px;
            box-sizing: border-box;
          }

          li a {
            text-decoration: none;
            color: #333;
          }

          .searchResult {
            border: 1px solid #ccc;
            padding: 10px;
            margin: 10px 0;
            border-radius: 10px;
            background-color: rgb(216, 245, 245);

            display: flex;
            flex-direction: column;
            gap: 2px;
          }

          .translateResult {
            align-items: center;
            background-color: rgb(243, 255, 174);
          }

          .ulReset {
            list-style: none;
            padding: 0;
            margin: 0;
          }

          .hero {
            display: flex;
            gap: 3px;
            align-items: center;
            justify-content: center;
            flex-direction: column;
          }
    
          .pagination {
            display: flex;
            gap: 3px;
            align-items: center;
            justify-content: center;
            font-size: large;
          }
        </style>
      </head>
      <body>
        <div class="hero">
          <input value="${query}" name="query" readonly />
          <h4>${total} results across ${results.length} pages</h4>
          <div class="pagination">
            <span><</span>
            ${pages.map((pageNo) => `<a href="#page${pageNo}">${pageNo}</a>`)}
            <span>></span>
          </div>
        </div>
        <hr />
        ${results.map(
          (page, i) => html(stripIndents)`
            <ul id="page-${i + 1}" class="ulReset">
              <h3 id="page${i + 1}">Page ${i +1} ${results.length > 1 ? `of ${results.length} pages` : ''} | ${page.length} entries for this page</h3>
              ${page.map((result) => {
                switch (result.type) {
                  case ResultTypes.SearchResult:
                    return html`
                      <li class="searchResult">
                        <h1>${result.title}</h1>
                        <a href="${result.link}">${result.link}</a>
                        <p>${result.description}</p>
                      </li>
                    `;
                  case ResultTypes.TranslateResult:
                    return html`
                      <li class="searchResult translateResult">
                        <h3>
                          ${result.source.text}
                        </h3>
                        ‚¨áÔ∏è
                        <div>
                          <h3>
                          ${result.translation.text}
                          </h3>
                          ${result.translation.pronunciation ? `<h5>üì¢ ${result.translation.pronunciation}</h5>` : ''}
                        </div>
                      </li>
                    `
                  default:
                    return "Unsupported";
                }
              })}
            </ul>
          `
        )}
        <hr />
        <div class="pagination">
          <span><</span>
          ${pages.map((pageNo) => `<a href="#page${pageNo}">${pageNo}</a>`)}
          <span>></span>
        </div>
      </body>
    </html>
  `;
}
